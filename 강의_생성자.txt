생성자
	- 객체를 생성
	- 객체를 만드는 틀
	
	함수 객체를 가지고 생성자를 만든다
	
	function 생성자명(......) {
		// 생성자 정의
		this.속성명 = 값;(원시타입, 객체, 함수 객체)
	}
	
	객체 생성 연산자
	new 
	
	생성자로부터 객체가 힙 영역에 생성
	
	생성된 객체 - 인스턴스
	
	예)
		function Person() {
		this.age = 40;
		this.gender = "F";
		this.walk = function() {
			console.log("걷기");
		};
	}
	
	정의된 속성 접근은 객체 생성 이후 접근이 가능
	this --> 객체가 생성이 된 후 존재
		--> 생성된 객체(인스턴스) 주소를 가지고 있는 변수
		--> 생성자 내부에만 존재하는 변수
		--> 외부에 생성된 생성자 변수와 동일한 주소를 가지고 있다.
		--> 차이점은 외부,내부
		
	const person1 = new Person();
	
	함수 -> 함수, 생성자
	관례적으로 생성자는 앞 첫글자() -> 대문자
	관례적으로 함수는 앞글자가 소문자
	
	함수명 명명 방식
	단어의 시작은 대문 -> 첫 글자는 소문자 -> 카멜케이스(일반 변스)
	function orderProcess(){
	}
	
	생성자 명명 방식
	단의 사직은 대문자 -> 첫 글자도 대문자 -> 파스칼 케이스
	function OrderProcess(){
	
	}
	
객체 생성방식

1. 생성자 생성 -> new 연사자를 통해 객체(인스턴스)생성
	예)
	function Person() {
		this.age = 40;
		this.gender = "F";
		this.walk = function() {
			console.log("걷기");
		}
	}
	
	const person = new Person();

2. {}로 객체를 생성 하는 방식 - 이미 생성된 객체
	
	예)
	const person{
	age: 40;,
	gender:"F",
	walk : function(){
	}	consol.log("걷기");
}

const person = new Object();
person.age = 40;
person.gender = "F";
person.walk = function() {
	console.log("걷기");
};

생성자 구조
생성자 함수는
	- prototype 속성명
		- constructor 속성 - 생성자를 정의한 원형
		- _proto_ - 객체의 상속 관계(링커)
		
	constructor의 생성자 원형이 new연산자로 복사 생성
			- 정의된 함수가 10개라고 가정
			- 객체를 10개 생성
					-> 동일한 함수가 각각 10개씩 존재
					-> 메모리에 부담
					
					함수는 prototype 속성에 정의
						-> 공동 데이터 영역에 생성 -> 1개 전체 객체 공유
						-> 인스턴 생성시 메모리 절약이 가능
						
						예)
						function Person() {
						this.age = 40;
						this.gender = "F";
					}

					Person.prototype.walk = function() {
						console.log("걷기");
					};

