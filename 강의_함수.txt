함수
	- 행위 - 처리의 일련과정을 묶어 놓은 기능단위
	
	인수 - 처리할 영역에 들어갈 값
	function 함수명 (인수, 인수 ...) {
		// 처리 영역
	
		return 값; // 처리된 결과 값을 반환
	}
	
	함수를 사용하려면? - 호출
	함수명();
	
	만약 인수가 있다면?
	함수명(값);
	
	인수가 없는 함수가 가능한가?
	- 가능
	function 함수명(){
	
	}
	
	함수명();
	
	반환값이 없는 함수가 가능한가?
	- 가능
	- 내부적으로는 return이 없어도 undefined를 반환
		(return undefined;)
		
	
	전역변수
		- 함수 외의 지역에서 정의되어 있는 변수
		- 함수 밖, 함수 안 모두 쓸 수 있는 변수
		
	지역변수
		- 함수 안에서 정의되어 있는 변수 
		- 함수 안에서만 쓸 수 있는 변수
		- 함수가 호출 될때만 사용가능
		- 함수가 호출되는 동안에만 값이 유효하다.
		- 함수가 스택영역 메모리에 올라가 있는 동안에만 유효하다.
	
	전역변수 명과 지역변수 명이 같으면
	-> 지역에서는 전역변수를 사용하지 않고, 지역변수를 사용
	

메모리
	데이터 영역
	힙영역
	
	스택영역 - 함수가 호출되면 메모리에 실리는 영역
					함수의 호출이 완료가 되면 함수가 메모리 영역에서 사라진다.
					
	스택(Stack) - 쌓다
	- 가장 마지막에 쌓은 것이 가장 먼저 꺼내진다.
	- 가장 처음에 쌓은 것을 가장 나중에 꺼낸다.
	
	큐(Queue) - 대기열
	- 가장 먼저 온 사람이 먼저 처리
	
자바스크립트에서 함수 
	-> 함수 객체
	-> 원시 타입 + 객체
	-> function 객체를 통해서 생성된 객체 ->Heap 영역
	
	자바스크립트에서 함수는 1급 객체
		- 함수를 인수로 쓸 수 있다.
			예)
				function testFunc(innerFunc) {
					innerFunc();
				}

				const innerFunc = function() {
					console.log("인수를 함수로 쓰는 내부 함수");
				};
				
		- 함수를 반환 값으로 사용 할 수 있다.
			function testFunc() {
					return function innerFunc() {
						console.log("함수를 반환");
					};
				}
				
				const func = testFunc();
				func();
		
		--함수 안에 함수를 정의 할 수 있다
		--클로져
	
	모든 변수 -> 스택 메모리에 저장 된다
	
	예)
	function sum() {
	
	};
	
	const sum = function() {
	
	};
	
	
	브라우저 -> 로딩(내부의 main 함수 호출)
	
	익명함수 - 이름이 없는 함수
	
즉시 실행 함수
	호출을 하는 별도 없이 바로 호출
	(function(변수){
		// 즉시 실행할 부분
		
		// 반환값 정의 가능
	})(인수);
	
	예)
	function(a,b){				
		alert(a+b);		
	})(2,3);
	
	예)
	const	result =(function(a,b)){
		return a+b;
	})(2,3);

3. 가변 인수
	1) 함수안에는 arguments 변수가 존재
	- 인수로 사용된 값을 배열 객체로 보관
	
	function testFunc() {
		let str = "";
		for(let i = 0; i < arguments.length; i++) {
			str += arguments[i] + ",";
		}

		return str;
	}
	
	testFunc(1,2,3,4,5,6,7,8);
	
	testFunc(1,2,3);
	
	2) ...인수 (마침표 3개)
		- 가변인수(개수 상관 없이 입력할 수 있는 인수)
		
		function testFunc(...str) {
			console.log(str);
		}
		
		testFunc(1,2,3,4);
		
		function testFunc(separator, ...str) {
			console.log(separator);
			console.log(str);
		}
		
		testFunc("/", "apple", "mango", "orange", "banana");